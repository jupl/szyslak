#+HTML: <h1>Szyslak <sub><sub><sub>ClojureScript + Rum + DataScript</sub></sub></sub></h1>
[[https://travis-ci.org/jupl/szyslak][file:http://img.shields.io/travis/jupl/szyslak/electron.svg?label=travis]]
[[https://jarkeeper.com/jupl/szyslak][file:https://jarkeeper.com/jupl/szyslak/status.svg]]

** Table of Contents
- [[#about][About]]
- [[#prerequisites][Prerequisites]]
- [[#getting-started][Getting Started]]
- [[#project-structure][Project Structure]]
- [[#tasks][Tasks]]
- [[#project-resources][Project Resources]]

** About
This is a boilerplate project for developing desktop applications with [[http://electron.atom.io/][Electron]] using [[https://clojurescript.org/][ClojureScript]], [[https://github.com/tonsky/datascript][DataScript]], and [[https://github.com/tonsky/rum][Rum]]. For an example project, visit the [[https://github.com/jupl/szyslak/tree/example][example]] branch. Flavors:
- [[https://github.com/jupl/szyslak/tree/master][Szyslak]]
- [[https://github.com/jupl/szyslak/tree/electron][Szyslak with Electron]]
- [[https://github.com/jupl/szyslak/tree/server][Szyslak with Clojure Server]]

^{[[#szyslak-clojurescript--rum--datascript][Back to top]]}

** Prerequisites
- JDK 1.7+
  - [[http://openjdk.java.net/install/index.html][OpenJDK]]
  - [[http://www.oracle.com/technetwork/java/javase/downloads/index.html][Oracle]]
- [[http://boot-clj.com/][Boot]]
- [Node.js](https://nodejs.org/en/)
  - [npm CLI](https://docs.npmjs.com/cli/npm) is usually included with Node.js
- [Yarn](https://yarnpkg.com/en/docs/install) (recommended)

^{[[#szyslak-clojurescript--rum--datascript][Back to top]]}

** Getting Started
1. Follow the [[https://github.com/boot-clj/boot#install][instructions for installing Boot]]
2. Clone/download this repository
3. Install dependencies using npm *or* Yarn:
  - =npm install=
  - =yarn=
4. Start running tasks as described below in the [[#tasks][tasks section]]

^{[[#szyslak-clojurescript--rum--datascript][Back to top]]}

** Project structure
*** Overview
#+BEGIN_EXAMPLE
szyslak/
├─ resources/           # Files to be included in build
│  ├─ assets/           # Static files
│  ├─ app.cljs.edn      # Main application window entry point
│  ├─ app.html          # HTML to present application
│  ├─ devcards.cljs.edn # Devcards entry point
│  ├─ devcards.html     # HTML to present Devcards
│  ├─ index.cljs.edn    # Electron application entry point
│  └─ package.json      # Project information for Electron application
├─ src/
│  └─ projectname/            # Project namespace
│     ├─ app/                 # Main application window namespace
│     │  ├─ components/       # Application components
│     │  │  └─ root.cljs      # Top level application view
│     │  └─ main.cljs         # Entry point
│     ├─ common/              # Shared code namespace
│     │  ├─ components/       # General components
│     │  │  └─ container.cljs # Container for top level components
│     │  ├─ config.cljc       # Configuration data/functions
│     │  ├─ devcards.cljs     # Devcards entry point
│     │  ├─ messenger.cljs    # Helpers for basic messenger system
│     │  └─ reload.cljs       # Helpers for hot reload
│     └─ electron/            # Electron application namespace
│        ├─ main.cljs         # Entry point
│        ├─ menu.cljs         # Helpers for working with menu
│        └─ window.cljs       # Helpers for creating/managing windows
├─ boot.properties # Boot properties
├─ build.boot      # Tasks and dependencies for project
└─ package.json    # Configuration, tasks, and dependencies for Electron builds
#+END_EXAMPLE
*** Entry Points
When JavaScript code is built, entry points are defined by the =.cljs.edn= file inside the =resources/= directory. The entry point files reference namespaces and functions in the =src/= directory.

^{[[#szyslak-clojurescript--rum--datascript][Back to top]]}

** Tasks
Tasks can be executed in the following manner:
#+BEGIN_EXAMPLE
boot [command]    # Boot
npm run [command] # NPM
yarn [command]    # Yarn
#+END_EXAMPLE
Examples:
#+BEGIN_EXAMPLE
boot dev -s -p 8000
boot dev && yarn dev
boot build && npm run build
#+END_EXAMPLE
*** =npm run dev= / =yarn dev=
Start a simple Electron application for development purposes using [[https://github.com/electron-userland/electron-prebuilt][electron-prebuilt]]. This assumes that there is a build available in the =target/= directory. (=boot dev=, =boot build=)
*** =npm run package= / =yarn package=
Build an unpackaged application using [[https://github.com/electron-userland/electron-builder][electron-builder]]. This assumes that there is a build available in the =target/= directory. (=boot build=)
*** =npm run build= / =yarn build=
Build and package application using [[https://github.com/electron-userland/electron-builder][electron-builder]]. This assumes that there is a build available in the =target/= directory. (=boot build=)
*** =boot dev [-d] [-s] [-p PORT]=
Create a development build with source maps.
- For development with Electron use the command =boot dev && npm run dev= or =boot dev && yarn dev=.
- If you want to include Devcards, use the =-d= option.
- If you want to run a local server with live updates and a REPL, use the =-s= option. The =-p= option is also available to specify the port number.
  - To run Electron the command =npm run dev= or =yarn dev= would need to be run in a separate window instead of the above.
*** =boot build=
Create a production build with optimizations.
- To preview the application the command =boot build && npm run package= or =boot build && yarn package= will generate an unpackaged application.
- To build and package use the command =boot build && npm run build= or =boot build && yarn build=.
*** =boot devcards=
Create a standalone build of devcards only.
*** =boot test=
Run all CLJS tests once. If tests are defined with devcards, those are included.
*** =boot watch test=
Run all CLJS tests once and run again on file changes. If tests are defined with devcards, those are included.
*** =boot lint=
Check and analyze source code.

^{[[#szyslak-clojurescript--rum--datascript][Back to top]]}

** Project Resources
- Language
  - [[https://clojurescript.org][ClojureScript]]
- Libraries
  - [[https://github.com/clojure/core.async][core.async]]
  - [[https://github.com/tonsky/datascript][DataScript]]
  - [[http://electron.atom.io/][Electron]]
  - [[https://github.com/tonsky/rum][Rum]]
- Development Tools
  - [[https://github.com/bhauman/devcards][Devcards]]
  - [[https://github.com/boot-clj/boot-cljs-devtools][Boot CLJS DevTools]]
- Build Tools
  - [[https://github.com/boot-clj/boot][Boot]]
  - [[https://github.com/electron-userland/electron-builder][electron-builder]]
  - [[https://github.com/electron-userland/electron-prebuilt][electron-prebuilt]]

^{[[#szyslak-clojurescript--rum--datascript][Back to top]]}
